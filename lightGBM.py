# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
from IPython import get_ipython

# %% [markdown]
# # LightGBM MS_Malware_Prediction

# %%
import pandas as pd
import numpy as np


# %%
import gc

gc.enable()

# %% [markdown]
# ## Reduce memory

# %%
dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float64',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

#Reduce the memory usage - Ashish
def reduce_mem_usage(df, verbose=True):
    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    start_mem = df.memory_usage().sum() / 1024**2    
    for col in df.columns:
        col_type = df[col].dtypes
        if col_type in numerics:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)  
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)    
    end_mem = df.memory_usage().sum() / 1024**2
    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
    return df

# %% [markdown]
# ## Load dataset

# %%
train = reduce_mem_usage(pd.read_csv('./train.csv', dtype=dtypes, memory_map=True))
test = reduce_mem_usage(pd.read_csv('./test.csv', dtype=dtypes, memory_map=True))

gc.collect()

# %% [markdown]
# ## After feature engineering, remove some colums which are mostly NaN

# %%
remove_cols = ['PuaMode', 
               'Census_ProcessorClass', 
               'Census_IsWIMBootEnabled', 
               'IsBeta', 
               'Census_IsFlightsDisabled', 
               'Census_IsFlightingInternal', 
               'AutoSampleOptIn', 
               'Census_ThresholdOptIn', 
               'SMode', 
               'Census_IsPortableOperatingSystem', 
               'Census_DeviceFamily', 
               'UacLuaenable', 
               'Census_IsVirtualDevice', 
               'Platform', 
               'Census_OSSkuName', 
               'Census_OSInstallLanguageIdentifier', 
               'Processor', 
               'MachineIdentifier']

train.drop(remove_cols, axis=1, inplace=True)
test_id = test['MachineIdentifier']
test.drop(remove_cols, axis=1, inplace=True)
gc.collect()


# %%
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

for usecol in train.columns.tolist()[:-1]:

    train[usecol] = train[usecol].astype('str')
    test[usecol] = test[usecol].astype('str')

    le = LabelEncoder().fit(np.unique(
        train[usecol].unique().tolist()+test[usecol].unique().tolist()
        ))

    train[usecol] = le.transform(train[usecol])+1
    test[usecol] = le.transform(test[usecol])+1

    gc.collect()

# %% [markdown]
# ## Generate X, y 

# %%
y_train = train['HasDetections']
del train['HasDetections']

gc.collect()

# %% [markdown]
# ## Use LightGBM classifier

# %%
import lightgbm as lgb

data_train = lgb.Dataset(train, y_train, silent=True)

# %% [markdown]
# ### Tuning parameter

# %%
# %%capture output_tuner

import optuna.integration.lightgbm as lgb

params = {
    'learning_rate': 0.5, 
    'n_estimators':595,
#     'num_leaves': 70, 
    'metric':'auc',

    'subsample': 0.8,
    'colsample_bytree': 0.8,

#     'device':'gpu',
#     'gpu_platform_id':0,
#     'gpu_device_id':2,
#     'n_jobs':6,
    }

tuner = lgb.LightGBMTunerCV(params, data_train,verbose_eval=100, early_stopping_rounds=50, nfold=5)
tuner.run()
print("Best score:", tuner.best_score)
print("Best params:", tuner.best_params)

# %% [markdown]
# ### Training

# %%
import lightgbm as lgb

params={
 'learning_rate': 0.5,
 'n_estimators': 595,
 'metric': 'auc',
 'bagging_fraction': 0.8,
 'feature_fraction': 0.9,
 'num_leaves': 36,
 'min_child_samples': 20,

#  'device':'gpu',
#  'gpu_platform_id':0,
#  'gpu_device_id':2,
 'n_jobs':6,
 }

model = lgb.train(params, data_train)

# %% [markdown]
# ### Dump model to file

# %%
model.save_model('train.model', num_iteration=model.best_iteration)


# %%
y_pred = model.predict(test, num_iteration=model.best_iteration)


# %%
# for i in range(y_pred.shape[0]):
#     if y_pred[i] > 0.5:
#         y_pred[i] = 1
#     else:
#         y_pred[i] = 0


# %%
pred=pd.DataFrame({'HasDetections': y_pred}, dtype='int8')
res=pd.concat([test_id, pred], axis=1)


# %%
res.to_csv('submission.csv', index=False)


# %%



