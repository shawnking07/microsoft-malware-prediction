# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
from IPython import get_ipython

# %% [markdown]
# # Feature Engineering
# 
# Use vaex to import data

# %%
import vaex

train = vaex.open('./train.csv.hdf5')


# %%
train.info()

# %% [markdown]
# ## NA values count

# %%
res=sorted([(i,train[i].countna()) for i in train],key=lambda a:a[1], reverse=True)


# %%
size=train.shape[0]
for i in res:
    print("{} {}".format(i[0].ljust(50),i[1]/size))

# %% [markdown]
# ## unique value freq count

# %%
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

import gc

gc.enable()

dropped_columns = ['MachineIdentifier','PuaMode','Census_ProcessorClass']

res = []
for i in train:
    if i not in dropped_columns:
        c=train[i].to_pandas_series().value_counts(dropna=True, normalize=True)
        print(c.values[0])
        res.append((i, c.values[0]))
        c.plot(kind='bar', title=i)
        plt.savefig('./pics/{}.png'.format(i))
        gc.collect()
        

res.sort(key=lambda a:a[1], reverse=True)


# %%
dropped_columns = ['PuaMode',
 'Census_ProcessorClass',
 'Census_IsWIMBootEnabled',
 'IsBeta',
 'Census_IsFlightsDisabled',
 'Census_IsFlightingInternal',
 'AutoSampleOptIn',
 'Census_ThresholdOptIn',
 'SMode',
 'Census_IsPortableOperatingSystem',
 'PuaMode',
 'Census_DeviceFamily',
 'UacLuaenable',
 'Census_IsVirtualDevice',
 'MachineIdentifier'
 ]


# %%
from vaex.ml.transformations import LabelEncoder

catogrical_features = [i for i in train if train[i].data_type() == str and i not in dropped_columns]

le=LabelEncoder(features=catogrical_features)
le_train=le.fit_transform(train)
le_train=le_train.drop(list(set(catogrical_features+dropped_columns)))


# %%
import numpy as np

le_train.fillna(0, inplace=True)

for i in le_train:
    if le_train[i].data_type() == object:
        le_train[i] = le_train[i].astype('int16')

# %% [markdown]
# ### Bug on vaex, after label encoding, return type changed to ``DataFrameArrays``

# %%
le_train.export_hdf5('le_train.hdf5')


# %%
import vaex
le_train=vaex.open('le_train.hdf5')


# %%
df_train = le_train.to_pandas_df() # save mem space


# %%
import seaborn as sns
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

cols = df_train.columns.tolist()

print(df_train.shape)

plt.figure(figsize=(69,69))

corr_res=df_train[cols].corr()

sns.heatmap(corr_res, cmap='RdBu_r', annot=True, center=0.0)
plt.title('Correlation')
plt.show()


# %%
plt.savefig('./pics/heatmap.png')


# %%



