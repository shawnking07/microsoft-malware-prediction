import pandas as pd
import numpy as np
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import KNNImputer, SimpleImputer
from sklearn.impute import MissingIndicator
from sklearn.metrics import classification_report
from functools import wraps
from time import time

'''
specify data types for pandas
'''
dtypes = {
    'MachineIdentifier': 'category',
    'ProductName': 'category',
    'EngineVersion': 'category',
    'AppVersion': 'category',
    'AvSigVersion': 'category',
    'IsBeta': 'int8',
    'RtpStateBitfield': 'float16',
    'IsSxsPassiveMode': 'int8',
    'DefaultBrowsersIdentifier': 'float32',
    'AVProductStatesIdentifier': 'float32',
    'AVProductsInstalled': 'float16',
    'AVProductsEnabled': 'float16',
    'HasTpm': 'int8',
    'CountryIdentifier': 'int16',
    'CityIdentifier': 'float32',
    'OrganizationIdentifier': 'float16',
    'GeoNameIdentifier': 'float16',
    'LocaleEnglishNameIdentifier': 'int16',
    'Platform': 'category',
    'Processor': 'category',
    'OsVer': 'category',
    'OsBuild': 'int16',
    'OsSuite': 'int16',
    'OsPlatformSubRelease': 'category',
    'OsBuildLab': 'category',
    'SkuEdition': 'category',
    'IsProtected': 'float16',
    'AutoSampleOptIn': 'int8',
    'PuaMode': 'category',
    'SMode': 'float16',
    'IeVerIdentifier': 'float16',
    'SmartScreen': 'category',
    'Firewall': 'float16',
    'UacLuaenable': 'float64',
    'Census_MDC2FormFactor': 'category',
    'Census_DeviceFamily': 'category',
    'Census_OEMNameIdentifier': 'float32',
    'Census_OEMModelIdentifier': 'float32',
    'Census_ProcessorCoreCount': 'float16',
    'Census_ProcessorManufacturerIdentifier': 'float16',
    'Census_ProcessorModelIdentifier': 'float32',
    'Census_ProcessorClass': 'category',
    'Census_PrimaryDiskTotalCapacity': 'float64',
    'Census_PrimaryDiskTypeName': 'category',
    'Census_SystemVolumeTotalCapacity': 'float64',
    'Census_HasOpticalDiskDrive': 'int8',
    'Census_TotalPhysicalRAM': 'float32',
    'Census_ChassisTypeName': 'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float32',
    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float32',
    'Census_InternalPrimaryDisplayResolutionVertical': 'float32',
    'Census_PowerPlatformRoleName': 'category',
    'Census_InternalBatteryType': 'category',
    'Census_InternalBatteryNumberOfCharges': 'float64',
    'Census_OSVersion': 'category',
    'Census_OSArchitecture': 'category',
    'Census_OSBranch': 'category',
    'Census_OSBuildNumber': 'int16',
    'Census_OSBuildRevision': 'int32',
    'Census_OSEdition': 'category',
    'Census_OSSkuName': 'category',
    'Census_OSInstallTypeName': 'category',
    'Census_OSInstallLanguageIdentifier': 'float16',
    'Census_OSUILocaleIdentifier': 'int16',
    'Census_OSWUAutoUpdateOptionsName': 'category',
    'Census_IsPortableOperatingSystem': 'int8',
    'Census_GenuineStateName': 'category',
    'Census_ActivationChannel': 'category',
    'Census_IsFlightingInternal': 'float16',
    'Census_IsFlightsDisabled': 'float16',
    'Census_FlightRing': 'category',
    'Census_ThresholdOptIn': 'float16',
    'Census_FirmwareManufacturerIdentifier': 'float16',
    'Census_FirmwareVersionIdentifier': 'float32',
    'Census_IsSecureBootEnabled': 'int8',
    'Census_IsWIMBootEnabled': 'float16',
    'Census_IsVirtualDevice': 'float16',
    'Census_IsTouchEnabled': 'int8',
    'Census_IsPenCapable': 'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16',
    'Wdft_IsGamer': 'float16',
    'Wdft_RegionIdentifier': 'float16'
}


'''
default values for fillna
'''
fill_na_val = {
    'MachineIdentifier': '_unknown_',
    'ProductName': '_unknown_',
    'EngineVersion': '_unknown_',
    'AppVersion': '_unknown_',
    'AvSigVersion': '_unknown_',
    'IsBeta': -1,
    'RtpStateBitfield': -1,
    'IsSxsPassiveMode': -1,
    'DefaultBrowsersIdentifier': -1,
    'AVProductStatesIdentifier': -1,
    'AVProductsInstalled': -1,
    'AVProductsEnabled': -1,
    'HasTpm': -1,
    'CountryIdentifier': -1,
    'CityIdentifier': -1,
    'OrganizationIdentifier': -1,
    'GeoNameIdentifier': -1,
    'LocaleEnglishNameIdentifier': -1,
    'Platform': '_unknown_',
    'Processor': '_unknown_',
    'OsVer': '_unknown_',
    'OsBuild': -1,
    'OsSuite': -1,
    'OsPlatformSubRelease': '_unknown_',
    'OsBuildLab': '_unknown_',
    'SkuEdition': '_unknown_',
    'IsProtected': -1,
    'AutoSampleOptIn': -1,
    'PuaMode': '_unknown_',
    'SMode': -1,
    'IeVerIdentifier': -1,
    'SmartScreen': '_unknown_',
    'Firewall': -1,
    'UacLuaenable': -1,
    'Census_MDC2FormFactor': '_unknown_',
    'Census_DeviceFamily': '_unknown_',
    'Census_OEMNameIdentifier': -1,
    'Census_OEMModelIdentifier': -1,
    'Census_ProcessorCoreCount': -1,
    'Census_ProcessorManufacturerIdentifier': -1,
    'Census_ProcessorModelIdentifier': -1,
    'Census_ProcessorClass': '_unknown_',
    'Census_PrimaryDiskTotalCapacity': -1,
    'Census_PrimaryDiskTypeName': '_unknown_',
    'Census_SystemVolumeTotalCapacity': -1,
    'Census_HasOpticalDiskDrive': -1,
    'Census_TotalPhysicalRAM': -1,
    'Census_ChassisTypeName': '_unknown_',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches': -1,
    'Census_InternalPrimaryDisplayResolutionHorizontal': -1,
    'Census_InternalPrimaryDisplayResolutionVertical': -1,
    'Census_PowerPlatformRoleName': '_unknown_',
    'Census_InternalBatteryType': '_unknown_',
    'Census_InternalBatteryNumberOfCharges': -1,
    'Census_OSVersion': '_unknown_',
    'Census_OSArchitecture': '_unknown_',
    'Census_OSBranch': '_unknown_',
    'Census_OSBuildNumber': -1,
    'Census_OSBuildRevision': -1,
    'Census_OSEdition': '_unknown_',
    'Census_OSSkuName': '_unknown_',
    'Census_OSInstallTypeName': '_unknown_',
    'Census_OSInstallLanguageIdentifier': -1,
    'Census_OSUILocaleIdentifier': -1,
    'Census_OSWUAutoUpdateOptionsName': '_unknown_',
    'Census_IsPortableOperatingSystem': -1,
    'Census_GenuineStateName': '_unknown_',
    'Census_ActivationChannel': '_unknown_',
    'Census_IsFlightingInternal': -1,
    'Census_IsFlightsDisabled': -1,
    'Census_FlightRing': '_unknown_',
    'Census_ThresholdOptIn': -1,
    'Census_FirmwareManufacturerIdentifier': -1,
    'Census_FirmwareVersionIdentifier': -1,
    'Census_IsSecureBootEnabled': -1,
    'Census_IsWIMBootEnabled': -1,
    'Census_IsVirtualDevice': -1,
    'Census_IsTouchEnabled': -1,
    'Census_IsPenCapable': -1,
    'Census_IsAlwaysOnAlwaysConnectedCapable': -1,
    'Wdft_IsGamer': -1,
    'Wdft_RegionIdentifier': -1
}


'''
columns to be removed after feature engineering
'''
remove_cols = [
    'PuaMode',
    'Census_ProcessorClass',
    'Census_IsWIMBootEnabled',
    'IsBeta',
    'Census_IsFlightsDisabled',
    'Census_IsFlightingInternal',
    'AutoSampleOptIn',
    'Census_ThresholdOptIn',
    'SMode',
    'Census_IsPortableOperatingSystem',
    'Census_DeviceFamily',
    'UacLuaenable',
    'Census_IsVirtualDevice',
    'Platform',
    'Census_OSSkuName',
    'Census_OSInstallLanguageIdentifier',
    'Processor',
    'MachineIdentifier'
]


def benchmark(func: callable):
    '''
    decorator for performance assessment
    '''
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time()
        result = func(*args, **kwargs)
        end_time = time()
        print('spend', end_time - start_time, 'seconds\n')
        return result
    return wrapper


def gen_small_train(filename, select_one_per_lines):
    '''
    generate a small size of training file based on 
    select_one_per_lines
    '''
    with open(filename, 'r') as train:
        small_train = []
        small_train.append(train.readline())
        line = train.readline()
        line_cnt = 1

        while line != '':
            if line_cnt % select_one_per_lines == 0:
                small_train.append(line)
            line_cnt += 1
            line = train.readline()

        with open('small_' + filename, 'w') as small:
            for i in small_train:
                small.write(i)


def load_train_file(filename: str, remove_attrs=[]) -> (pd.DataFrame, pd.DataFrame):
    '''
    open and load given file as a csv file
    and remove given columns
    then finally return X and y
    '''
    df = pd.read_csv(filename, dtype=dtypes)
    df.drop(remove_attrs, axis='columns', inplace=True)
    x_cols = df.columns.tolist()
    x_cols.remove('HasDetections')
    y_col = 'HasDetections'
    return df[x_cols], df[y_col]


def encode_and_fill(df: pd.DataFrame) -> np.ndarray:
    '''
    default strategy for missing values
    '''
    for col_name in df.columns:
        if str(df[col_name].dtype) is 'category':
            df[col_name] = df[col_name].cat.add_categories('_unknown_')
    df.fillna(value=fill_na_val, inplace=True)
    encoder = OrdinalEncoder()
    return encoder.fit_transform(df)


def encode_and_fill_with_knn(df: pd.DataFrame) -> np.ndarray:
    '''
    fill missing values with knn imputer
    '''
    # construct pipeline for transformation
    numerical_features = []
    categorial_features = []
    for k in dtypes:
        if dtypes[k] == 'category':
            categorial_features.append(k)
        else:
            numerical_features.append(k)

    # steps processing columns
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value=-1)),
        ('imputer_k', KNNImputer(missing_values=-1)),
        ('encoder', OrdinalEncoder())
    ])

    category_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='_unknown_')),
        ('encoder', OrdinalEncoder())
    ])

    preprocess = ColumnTransformer(transformers=[
        ('num', numeric_transformer, numerical_features),
        ('cat', category_transformer, categorial_features)
    ])
    t = preprocess.fit_transform(df)
    return t


@benchmark
def baseline_test(classifer, train_filename,
                  data_preprocess=encode_and_fill, 
                  remove_attrs=[], **classier_kwargs):
    '''
    run baseline test with given classifier
    '''
    clf = classifer(**classier_kwargs)
    print('baseline test using classifier:', clf.__class__.__name__)
    X_train, y_train = load_train_file(train_filename, remove_attrs)
    print('size of the data:', X_train.shape, '\n')
    X_train_enc = data_preprocess(X_train)
    clf.fit(X_train_enc, y_train)

    y_predict = clf.predict(X_train_enc)
    print(classification_report(y_train, y_predict))







