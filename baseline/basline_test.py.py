from common import baseline_test, gen_small_train, encode_and_fill_with_knn, remove_cols
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

import sys

train_filename = 'train.csv'
select_one_per_lines = 1000
use_small_dataset = True

'''
if input is a number, this number means how to scale the
origin dataset
otherwise, it means which file to process
'''

if len(sys.argv) > 1:
    if '.csv' in sys.argv[1]:
        train_filename = sys.argv[1]
        use_small_dataset = False
    else:
        select_one_per_lines = int(sys.argv[1])

if use_small_dataset:
    gen_small_train(train_filename, select_one_per_lines)
    train_filename = 'small_' + train_filename

print(' --- fill empty data, no remove column --- ')
baseline_test(DecisionTreeClassifier, train_filename, min_samples_leaf=0.2)
baseline_test(RandomForestClassifier, train_filename, min_samples_leaf=0.2)
baseline_test(BernoulliNB, train_filename)
baseline_test(MultinomialNB, train_filename)

print('\n --- fill empty data, remove column --- ')
baseline_test(DecisionTreeClassifier, train_filename,
              remove_attrs=remove_cols, min_samples_leaf=0.2)
baseline_test(RandomForestClassifier, train_filename,
              remove_attrs=remove_cols, min_samples_leaf=0.2)
baseline_test(BernoulliNB, train_filename, remove_attrs=remove_cols)
baseline_test(MultinomialNB, train_filename, remove_attrs=remove_cols)


if use_small_dataset and select_one_per_lines >= 1000:
    print('\n --- impute data, remove column --- ')
    baseline_test(DecisionTreeClassifier, train_filename,
                encode_and_fill_with_knn, remove_attr=remove_cols, min_samples_leaf=0.2)
    baseline_test(RandomForestClassifier, train_filename,
                encode_and_fill_with_knn, remove_attr=remove_cols, min_samples_leaf=0.2)
    baseline_test(BernoulliNB, train_filename, encode_and_fill_with_knn)
    baseline_test(MultinomialNB, train_filename, encode_and_fill_with_knn)

    print('\n --- impute data, no remove column --- ')
    baseline_test(DecisionTreeClassifier, train_filename,
                encode_and_fill_with_knn, min_samples_leaf=0.2)
    baseline_test(RandomForestClassifier, train_filename,
                encode_and_fill_with_knn, min_samples_leaf=0.2)
    baseline_test(BernoulliNB, train_filename, encode_and_fill_with_knn)
    baseline_test(MultinomialNB, train_filename, encode_and_fill_with_knn)
